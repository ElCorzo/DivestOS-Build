From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: MSe1969 <mse1969@posteo.de>
Date: Mon, 10 Sep 2018 12:05:40 +0200
Subject: [PATCH] Network & Internet Settings: Add option to switch off Captive
 portal check

 * Option added in Network & Internet Settings, which is equivalent to
   the adb shell command 'settings put global captive_portal_mode [1/0]'
 * Will be reset to default, if 'Reset network settings' is chosen (menu)
 * Warning dialog is shown, when captive portal check is switched off
 * Hidden under 'advanced'

Change-Id: Ibbffdb5f3930df74ca8b4ba93d451f7fad086989
---
 res/values-de/cm_strings.xml                  |  3 +
 res/values/cm_strings.xml                     |  5 ++
 res/xml/network_and_internet.xml              |  6 ++
 .../android/settings/ResetNetworkConfirm.java |  5 ++
 ...CaptivePortalModePreferenceController.java | 81 +++++++++++++++++++
 .../network/CaptivePortalWarningDialog.java   | 73 +++++++++++++++++
 .../CaptivePortalWarningDialogHost.java       | 32 ++++++++
 .../network/NetworkDashboardFragment.java     | 17 +++-
 8 files changed, 221 insertions(+), 1 deletion(-)
 create mode 100644 src/com/android/settings/network/CaptivePortalModePreferenceController.java
 create mode 100644 src/com/android/settings/network/CaptivePortalWarningDialog.java
 create mode 100644 src/com/android/settings/network/CaptivePortalWarningDialogHost.java

diff --git a/res/values-de/cm_strings.xml b/res/values-de/cm_strings.xml
index e78bbea1202..54e2864c9aa 100644
--- a/res/values-de/cm_strings.xml
+++ b/res/values-de/cm_strings.xml
@@ -308,4 +308,7 @@
     <string name="tethering_allow_vpn_upstreams_title">Clients erlauben VPN zu verwenden</string>
     <string name="tethering_allow_vpn_upstreams_summary">Erlaubt Hotspot-Clients die VPN-Verbindungen dieses Ger채tes f체r die Upstream-Konnektivit채t zu verwenden</string>
     <string name="network_settings_shortcut_title">Mobilfunknetz</string>
+    <string name="captive_portal_switch_title">Captive Portal Erkennung</string>
+    <string name="captive_portal_switch_summary">Ein-/Ausschalten der Captive-Portal-Erkennung (Vorgabe EIN).</string>
+    <string name="captive_portal_switch_warning">Nach dem Ausschalten der Captive-Portal-Erkennung empfangen Sie keine Verbindungs-R체ckmeldung mehr. Wirklich fortfahren?</string>
 </resources>
diff --git a/res/values/cm_strings.xml b/res/values/cm_strings.xml
index 7d0b80d3c05..c4a0aaa9157 100644
--- a/res/values/cm_strings.xml
+++ b/res/values/cm_strings.xml
@@ -398,4 +398,9 @@
 
     <!-- Label for settings shortcut: mobile network -->
     <string name="network_settings_shortcut_title">Mobile network</string>
+
+    <!-- Captive Portal -->
+    <string name="captive_portal_switch_title">Captive portal mode</string>
+    <string name="captive_portal_switch_summary">Enable or disable the captive portal probing for connection attempts (default ON).</string>
+    <string name="captive_portal_switch_warning">If you switch off the captive portal, you will not receive connectivity informations any longer. Really switch off?</string>
 </resources>
diff --git a/res/xml/network_and_internet.xml b/res/xml/network_and_internet.xml
index 6eda0b09669..899bc41dd22 100644
--- a/res/xml/network_and_internet.xml
+++ b/res/xml/network_and_internet.xml
@@ -101,4 +101,10 @@
         android:positiveButtonText="@string/save"
         android:negativeButtonText="@android:string/cancel" />
 
+    <SwitchPreference
+        android:key="captive_portal_switch"
+        android:title="@string/captive_portal_switch_title"
+        android:summary="@string/captive_portal_switch_summary"
+        android:order="20"/>
+
 </PreferenceScreen>
diff --git a/src/com/android/settings/ResetNetworkConfirm.java b/src/com/android/settings/ResetNetworkConfirm.java
index 4bdd8e1dba8..2c9f04ca3e2 100644
--- a/src/com/android/settings/ResetNetworkConfirm.java
+++ b/src/com/android/settings/ResetNetworkConfirm.java
@@ -32,6 +32,7 @@ import android.os.Bundle;
 import android.os.RecoverySystem;
 import android.os.UserHandle;
 import android.os.UserManager;
+import android.provider.Settings;
 import android.provider.Telephony;
 import android.support.annotation.VisibleForTesting;
 import android.telephony.SubscriptionManager;
@@ -152,6 +153,10 @@ public class ResetNetworkConfirm extends InstrumentedFragment {
 
             ImsManager.factoryReset(context);
             restoreDefaultApn(context);
+
+            Settings.Global.putInt(context.getContentResolver(),
+                    Settings.Global.CAPTIVE_PORTAL_MODE, 1);
+
             esimFactoryReset(context, context.getPackageName());
             // There has been issues when Sms raw table somehow stores orphan
             // fragments. They lead to garbled message when new fragments come
diff --git a/src/com/android/settings/network/CaptivePortalModePreferenceController.java b/src/com/android/settings/network/CaptivePortalModePreferenceController.java
new file mode 100644
index 00000000000..0fd2d094a1b
--- /dev/null
+++ b/src/com/android/settings/network/CaptivePortalModePreferenceController.java
@@ -0,0 +1,81 @@
+/*
+ * Copyright (C) 2018 The LineageOS Project
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package com.android.settings.network;
+
+import android.app.Fragment;
+import android.content.Context;
+import android.provider.Settings;
+import android.support.v14.preference.SwitchPreference;
+import android.support.v7.preference.Preference;
+
+import com.android.settings.core.PreferenceControllerMixin;
+import com.android.settingslib.core.AbstractPreferenceController;
+
+public class CaptivePortalModePreferenceController extends AbstractPreferenceController
+        implements PreferenceControllerMixin, Preference.OnPreferenceChangeListener {
+
+    private static final String TAG = "CaptivePortalModePreferenceController";
+    private static final String CAPTIVE_PORTAL_SWITCH_KEY = "captive_portal_switch";
+
+    private SwitchPreference mCaptivePortalMode;
+    private Preference mPreference;
+    private final Fragment mFragment;
+
+    public CaptivePortalModePreferenceController(Context context, Fragment hostFragment) {
+        super(context);
+
+        mFragment = hostFragment;
+    }
+
+    @Override
+    public void updateState(Preference preference) {
+        boolean value = (Settings.Global.getInt(mContext.getContentResolver(),
+                         Settings.Global.CAPTIVE_PORTAL_MODE,
+                         Settings.Global.CAPTIVE_PORTAL_MODE_PROMPT) != 0);
+        ((SwitchPreference) preference).setChecked(value);
+    }
+
+    @Override
+    public boolean onPreferenceChange(Preference preference, Object newValue) {
+        mPreference = preference;
+        if ((Boolean) newValue) {
+            Settings.Global.putInt(mContext.getContentResolver(),
+                    Settings.Global.CAPTIVE_PORTAL_MODE, 1);
+        } else {
+            CaptivePortalWarningDialog.show(mFragment);
+        }
+        return true;
+    }
+
+    public void onCaptivePortalSwitchOffDialogConfirmed() {
+        Settings.Global.putInt(mContext.getContentResolver(),
+                Settings.Global.CAPTIVE_PORTAL_MODE, 0);
+    }
+
+    public void onCaptivePortalSwitchOffDialogDismissed() {
+        updateState(mPreference);
+    }
+
+    @Override
+    public boolean isAvailable() {
+        return true;
+    }
+
+    @Override
+    public String getPreferenceKey() {
+        return CAPTIVE_PORTAL_SWITCH_KEY;
+    }
+}
diff --git a/src/com/android/settings/network/CaptivePortalWarningDialog.java b/src/com/android/settings/network/CaptivePortalWarningDialog.java
new file mode 100644
index 00000000000..8240c2756e4
--- /dev/null
+++ b/src/com/android/settings/network/CaptivePortalWarningDialog.java
@@ -0,0 +1,73 @@
+/*
+ * Copyright (C) 2018 The LineageOS Project
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package com.android.settings.network;
+
+import android.app.AlertDialog;
+import android.app.Dialog;
+import android.app.Fragment;
+import android.app.FragmentManager;
+import android.content.DialogInterface;
+import android.os.Bundle;
+
+import com.android.internal.logging.nano.MetricsProto;
+import com.android.settings.R;
+import com.android.settings.core.instrumentation.InstrumentedDialogFragment;
+
+public class CaptivePortalWarningDialog extends InstrumentedDialogFragment implements
+        DialogInterface.OnClickListener, DialogInterface.OnDismissListener {
+
+    public static final String TAG = "CaptivePortalWarningDialog";
+
+    public static void show(Fragment host) {
+        final FragmentManager manager = host.getActivity().getFragmentManager();
+        if (manager.findFragmentByTag(TAG) == null) {
+            final CaptivePortalWarningDialog dialog =
+                    new CaptivePortalWarningDialog();
+            dialog.setTargetFragment(host, 0 /* requestCode */);
+            dialog.show(manager, TAG);
+        }
+    }
+
+    @Override
+    public int getMetricsCategory() {
+        return MetricsProto.MetricsEvent.TYPE_UNKNOWN;
+    }
+
+    @Override
+    public Dialog onCreateDialog(Bundle savedInstanceState) {
+        return new AlertDialog.Builder(getActivity())
+                .setTitle(R.string.captive_portal_switch_title)
+                .setMessage(R.string.captive_portal_switch_warning)
+                .setIconAttribute(android.R.attr.alertDialogIcon)
+                .setPositiveButton(android.R.string.yes, this /* onClickListener */)
+                .setNegativeButton(android.R.string.no, this /* onClickListener */)
+                .create();
+    }
+
+    @Override
+    public void onClick(DialogInterface dialog, int which) {
+        final CaptivePortalWarningDialogHost host = (CaptivePortalWarningDialogHost) getTargetFragment();
+        if (host == null) {
+            return;
+        }
+        if (which == DialogInterface.BUTTON_POSITIVE) {
+            host.onCaptivePortalSwitchOffDialogConfirmed();
+        } else {
+            host.onCaptivePortalSwitchOffDialogDismissed();
+        }
+    }
+}
diff --git a/src/com/android/settings/network/CaptivePortalWarningDialogHost.java b/src/com/android/settings/network/CaptivePortalWarningDialogHost.java
new file mode 100644
index 00000000000..7a04d1f8311
--- /dev/null
+++ b/src/com/android/settings/network/CaptivePortalWarningDialogHost.java
@@ -0,0 +1,32 @@
+/*
+ * Copyright (C) 2018 The LineageOS Project
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package com.android.settings.network;
+
+/**
+ * Interface for CaptivePortalWarningDialogHost callbacks.
+ */
+public interface CaptivePortalWarningDialogHost {
+    /**
+     * Called when the user presses YES/ok on the warning dialog.
+     */
+    void onCaptivePortalSwitchOffDialogConfirmed();
+
+    /**
+     * Called when the user presses NO/cancel on the warning dialog.
+     */
+    void onCaptivePortalSwitchOffDialogDismissed();
+}
diff --git a/src/com/android/settings/network/NetworkDashboardFragment.java b/src/com/android/settings/network/NetworkDashboardFragment.java
index 89bf5f4dec2..4af55e2b507 100644
--- a/src/com/android/settings/network/NetworkDashboardFragment.java
+++ b/src/com/android/settings/network/NetworkDashboardFragment.java
@@ -44,7 +44,7 @@ import java.util.Arrays;
 import java.util.List;
 
 public class NetworkDashboardFragment extends DashboardFragment implements
-        MobilePlanPreferenceHost {
+        MobilePlanPreferenceHost, CaptivePortalWarningDialogHost {
 
     private static final String TAG = "NetworkDashboardFrag";
 
@@ -95,6 +95,8 @@ public class NetworkDashboardFragment extends DashboardFragment implements
                 new VpnPreferenceController(context);
         final PrivateDnsPreferenceController privateDnsPreferenceController =
                 new PrivateDnsPreferenceController(context);
+        final CaptivePortalModePreferenceController captiveportalModePreferenceController =
+                new CaptivePortalModePreferenceController(context, fragment);
 
         if (lifecycle != null) {
             lifecycle.addObserver(mobilePlanPreferenceController);
@@ -112,9 +114,22 @@ public class NetworkDashboardFragment extends DashboardFragment implements
         controllers.add(mobilePlanPreferenceController);
         controllers.add(wifiPreferenceController);
         controllers.add(privateDnsPreferenceController);
+        controllers.add(captiveportalModePreferenceController);
         return controllers;
     }
 
+    public void onCaptivePortalSwitchOffDialogConfirmed() {
+        final CaptivePortalModePreferenceController controller =
+                use(CaptivePortalModePreferenceController.class);
+        controller.onCaptivePortalSwitchOffDialogConfirmed();
+    }
+
+    public void onCaptivePortalSwitchOffDialogDismissed() {
+        final CaptivePortalModePreferenceController controller =
+                use(CaptivePortalModePreferenceController.class);
+        controller.onCaptivePortalSwitchOffDialogDismissed();
+    }
+
     @Override
     public void showMobilePlanMessageDialog() {
         showDialog(MANAGE_MOBILE_PLAN_DIALOG_ID);
